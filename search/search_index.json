{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API design guidelines","text":"<p>Status: DRAFT</p> <p>This documentation aims to define a set of rules and principles for the design of public APIs.</p>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Design decisions in an API are front and center, shown to all of the users of the API. Since this seriously limits our ability to make incremental improvements on our designs, relying on existing patterns that have survived the tests of time is very valuable in getting things right the first time rather than just eventually.</p>"},{"location":"#literature","title":"Literature","text":"<p>Here is a list of valuable readings that have contributed to the writing of these guidelines.</p> <ul> <li>API Design Patterns \u200bby JJ Geewax</li> <li>The Design of Web APIs  \u200bby Arnaud Lauret</li> <li>Principles of Web Api Design by James Higginbotham</li> <li>API Improvement Proposals \u200bby Google</li> <li>Web Concepts</li> <li>API Stylebook</li> </ul>"},{"location":"apat-1-resource-identification/","title":"Standards","text":"<p>Use nouns not verbs</p> <ul> <li>get <code>GET /clients/1dbd456aa-c129-4904-a44b-f115a6e851a3</code></li> <li>list <code>GET /clients</code></li> <li>create <code>POST /clients</code></li> <li>update <code>PATCH /accounts/c47a0e82-e956-437d-8801-5d21a4f1b7f0</code></li> <li>replace<code>PUT /orders/e7c07022-f583-4245-80a8-f20222e55e46</code></li> <li>remove <code>DELETE /addresses/0659c040-1a73-4437-bf0a-86c33e44ce64</code></li> </ul> <p>Use plurals to manage both collection and instance resources</p> <ul> <li>Collection: <code>/users</code></li> <li>Instance: <code>/users/johndoe</code></li> </ul> <p>Use hierarchical URLs to imply structure (aggregation or composition)</p> <p><code>GET /orders/e7c07022-f583-4245-80a8-f20222e55e46/products/2d2d6af5-e37c-408b-981e-f834bf4c162e</code></p> <p>Use business unique identifiers or opaque and hard to guess ones</p> <p>Do not expose a database primary key as identifier but a logical unique one.  </p> <p><code>/organisations/Lumberjacks</code> <code>/citizens/756-1234-4321-01</code> <code>/clients/1dbd456aa-c129-4904-a44b-f115a6e851a3</code></p>"},{"location":"apat-1-resource-identification/#access-to-one-resource","title":"Access to one resource","text":"<p>The investment proposal resource identified by 5558fba8-104f-464a-a2d2-76837a1895a6</p> <p><code>GET /investment-proposals/5558fba8-104f-464a-a2d2-76837a1895a6</code></p> <p>The user resource identified by johndoe inside the organisation resource identified by Lumberjacks</p> <p><code>GET /organisations/Lumberjacks/users/johndoe</code></p> <p>The one default strategy resource attached to the portfolio resource identified by 0c92d1b7-04f4-48ab-9333-83ec916b08a6</p> <p><code>GET /portfolios/0c92d1b7-04f4-48ab-9333-83ec916b08a6/default-strategy</code></p> <p>The singleton user information resource</p> <p><code>GET /user-info</code></p>"},{"location":"apat-1-resource-identification/#access-to-more-than-one-resource","title":"Access to more than one resource","text":"<p>All the organisations</p> <p><code>GET /organisations</code></p> <p>A list of identified organisations: Lumberjacks,Lions</p> <p><code>GET /organisations?id=Lumberjacks&amp;id=Lions</code></p> <p>All the organisations with name <code>lumb</code></p> <p><code>GET /organisations?name=lumb</code></p> <p>The users of the organisation <code>Lumberjacks</code></p> <p><code>GET /organisations/Lumberjacks/users</code></p> <p>The users of all organisations with first name <code>doe</code> and last name <code>doe</code></p> <p><code>GET /organisations/*/users?firstName=john&amp;lastName=doe</code> <code>GET /organisations/users?firstName=john&amp;lastName=doe</code></p>"},{"location":"apat-1-resource-identification/#access-to-some-fields-projection","title":"Access to some fields (projection)","text":"<p>Name, tags, and partner of the users of the organisation <code>Lumberjacks</code></p> <p><code>GET /organisations/Lumberjacks?fields=name,tags,partner</code></p> <p>List all the organisations with all their attributes</p> <p><code>GET /organisations?view=full</code></p> <p>A predefined and minimal subset of the attributes of all the organisations</p> <p><code>GET /organisations?view=minimalistic</code></p>"},{"location":"implementation_considerations/","title":"Implementation considerations","text":""},{"location":"implementation_considerations/#data-structures","title":"Data structures","text":""},{"location":"implementation_considerations/#date-time","title":"Date &amp; time","text":"<p>A date and time MUST be represented in its ISO 8601 format.</p> <ul> <li>A date is represented by a string with the following format: <code>YYYY-MM-DD</code>.</li> <li>A date and time is represented by a string with the following format: <code>&lt;date&gt;T&lt;time&gt;&lt;timezone&gt;</code>, where:<ul> <li><code>&lt;date&gt;</code> follows the format described above: <code>YYYY-MM-DD</code></li> <li><code>&lt;time&gt;</code> MUST be formatted as <code>HH:MM:SS</code></li> <li><code>&lt;timezone&gt;</code> can be formatted in two ways: <code>Z</code> if the timezone is UTC, <code>+hh:mm</code> if another timezone</li> </ul> </li> </ul> <p>Examples:</p> <pre><code>\"2006-01-03\"\n\"2021-06-18T13:29:26+00:00\"\n\"2021-06-18T13:29:26Z\"\n</code></pre>"},{"location":"implementation_considerations/#currency","title":"Currency","text":"<p>Currencies MUST be represented in their ISO 4217 format, by an uppercase string.</p> <p>Examples:</p> <pre><code>\"CHF\"\n\"USD\"\n</code></pre>"},{"location":"implementation_considerations/#response-codes","title":"Response codes","text":"<p>Successful response status codes:</p> <ul> <li><code>200</code> -&gt; OK</li> <li><code>201</code> -&gt; Created</li> <li><code>202</code> -&gt; Accepted (The request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.)</li> <li><code>204</code> -&gt; No content</li> </ul> <p>Error response status codes:</p> <ul> <li><code>400</code> -&gt; bad parameters provided by the user. Failed validation, or the resource doesn't exist</li> <li><code>401</code> -&gt; Unauthorized. Ex: not authenticated, invalid auth</li> <li><code>403</code> -&gt; Forbidden. Ex: you don't have access to this resource</li> <li><code>404</code> -&gt; Not found. The endpoint doesn't exist. The resource doesn't exist -&gt; use 400</li> <li><code>500</code> -&gt; Internal error</li> <li><code>503</code> -&gt; Service Unavailable</li> <li><code>504</code> -&gt; Gateway timeout</li> </ul>"},{"location":"implementation_considerations/#error-responses","title":"Error responses","text":"<p>The RFC-7807 specifies the HTTP header and the body of the error response.</p> <p>When an API call returns a problem, it MUST return the proper status code, together with the right content type, and the expected attributes in the body.</p> <pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/problem+json\nContent-Language: en\n{\n    \"status\": 400,\n    \"type\": \"https://company.com/probs/portfolio-risk-measure\",\n    \"title\": \"Cannot Process\",\n    \"detail\": \"The content you have sent is not correct\",\n    \"errors\": [\n        {\n            \"message\": \"Invalid ISIN format: CH00388633501\"\n        }\n    ]\n}\n</code></pre>"},{"location":"process_guidelines/","title":"Design process guidelines","text":"<p>Status: TODO</p>"},{"location":"reference_guidelines/","title":"Reference guidelines","text":"<p>Status: DRAFT</p>"},{"location":"reference_guidelines/#api-design-criteria","title":"API design criteria","text":"<p>What does make a good web API? A good API has to provide some functionality that users want to use programmatically. Here is a set of quality criteria.</p> ID Name Description AQC-1 Simplicity The API must expose the functionality that users want in the most straightforward way possible; To keep the most frequent scenarios easy and simple; To make the common case awesome and the advanced case possible. AQC-2 Expressive The API must allow the users to express what they want to do; The functionaly supported by the API must be easy to be accessed by the users. AQC-3 Predictability The API must rely on repeated, consistently applied, predictable patterns that are easier and faster to learn. AQC-4 Operational The API must do what the users actually want to do. AQC-5 Sustainability The API must rely on solid concepts mainly related to the domain; APIs are generally very rigid and therefore not easy to change. AQC-6 Consistency The API must stick with one set of naming conventions, patterns and principles. <p>These quality criteria are supported by a set of standard design principles and standard design patterns.</p>"},{"location":"reference_guidelines/#api-design-principles","title":"API design principles","text":"<p>A design principle is a standard design rule or guideline that has to be applied consistently. It aims to guide the designer towards building a good API.</p> ID Name Description AP-1 Expressive naming A name must clearly convey the thing that it\u2019s naming. AP-2 Simple naming A name should not be excessively long nor oversimplified either; Each additional part of a name must add value to justify its presence. AP-3 Predictable naming The same name should be used to represent the same thing and different names to represent different things; To allow users of the API to learn one name and continue building on that knowledge; To choose a naming design and stick to it. AP-4 Naming language The maximum interoperability across the world; English language concepts should be used and common American-style spellings should generally be preferred; To choose one language and stick to it. AP-5 Naming grammar To use imperative actions, to avoid prepositions, and to use pluralization for naming collection name of a bunch of REST resources; To choose one grammar and stick to it. AP-6 Naming syntax URL names take on kebab case and field names take on camel case; To choose one syntax and stick to it. AP-7 Naming terminology To reflect the domain language and model on the API language and model or resource layout. AP-8 Contextual naming The naming is specific to one domain language and model. AP-9 Resource One separate resource for one concept, if it is needed to atomically interact with that concept. AP-10 Resource relationship To only store relationships if they provide important functionality to the API; To avoid overly deep hierarchical relationships. AP-11 Typing To think in terms of the data types offered by the chosen serialization format. To ensure types are documented well enough so that clients are never surprised by their behavior. AP-12 Missing values AP-13 Default values AP-14 Less is more To expose a minimal set of attributes to avoid sustainable coupling by the clients AP-15 Hide your internals To not expose the technical implementation details to the outside"},{"location":"reference_guidelines/#api-design-patterns","title":"API design patterns","text":"<p>A design pattern is a standard, well-known, approved, reusable, and adaptable piece of design. It acts as a blueprint for solving similarly structured problems and focuses on a structural or a behavioural aspect. Finally, design patterns help minimize the need for large structural changes.</p>"},{"location":"reference_guidelines/#rest","title":"REST","text":"ID Name Solves APAT-1 Resource identification How to identify resources in an API APAT-2 Standard methods The set of standard methods for use in resource-oriented APIs APAT-3 Partial updates and retrievals How to interact with portions of resources APAT-4 Custom methods Using custom (non-standard) methods in resource-oriented APIs APAT-5 Association resources How to manage many-to-many relationships with metadata APAT-6 Long-running How to handle methods that are not instantaneous APAT-7 Rerunnable jobs Running repeated custom functionality in an API APAT-8 Cross references How to reference other resources in an API APAT-9 Association resources How to manage many-to-many relationships with metadata APAT-10 Add and remove custom methods How to manage many-to-many relationships without metadata APAT-11 Polymorphism Designing resources with dynamically-typed attributes APAT-12 Copy and move Duplicating and relocating resources in an API APAT-13 Batch operations Extending methods to apply to groups of resources atomically APAT-14 Criteria-based deletion Deleting multiple resources based on a set of filter criteria APAT-15 Anonymous writes Ingesting unaddressable data into an API APAT-16 Pagination Consuming large amounts of data in bite-sized chunks APAT-17 Filtering Limiting result sets according to a user-specified filter APAT-18 Importing and exporting Moving data into or out of an API by interacting directly with a storage system APAT-19 Versioning and compatibility Defining compatibility and strategies for versioning APIs APAT-20 Soft deletion Moving resources to the \u201cAPI recycle bin\u201d APAT-21 Request deduplication Preventing duplicate work due to network interruptions in APIs APAT-22 Request validation Allowing API methods to be called in \u201csafe mode\u201d APAT-23 Resource revisions Tracking resource change history APAT-24 Request retrial Algorithms for safely retrying API requests APAT-25 Request authentication Verifying that requests are authentic and untampered with"},{"location":"usecase_guidelines/","title":"Use case guidelines","text":"<p>Status: TODO</p>"}]}